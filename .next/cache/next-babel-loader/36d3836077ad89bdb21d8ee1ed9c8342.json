{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/Accenture/next-js-places-map/components/searchForm.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLoadScript, Autocomplete } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getMapLocation } from \"../redux/maps/mapSlice\";\nconst scriptOptions = {\n  googleMapsApiKey: \"AIzaSyCn7YgQgOtNoSwAXJ_OQ-urMB5oNVq73cM\",\n  libraries: ['places']\n};\nexport default function SearchForm({\n  action\n}) {\n  const router = useRouter();\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript(scriptOptions);\n  const {\n    0: autocomplete,\n    1: setAutocomplete\n  } = useState(null);\n  const inputEl = useRef(null);\n  let locationData = useSelector(state => state.mapsData);\n  let dispatch = useDispatch();\n  console.log(locationData.data);\n\n  const onKeypress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      return false;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  const onLoad = autocompleteObj => {\n    setAutocomplete(autocompleteObj);\n  };\n\n  const onPlaceChanged = e => {\n    if (autocomplete) {\n      const place = autocomplete.getPlace();\n\n      if ('place_id' in place) {\n        dispatch(getMapLocation({\n          place: place\n        }));\n      }\n    }\n  };\n\n  React.useEffect(() => {}, [dispatch, locationData.data]);\n  return __jsx(\"div\", {\n    className: \"bg-white shadow p-10 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, loadError && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Google Map script can't be loaded, please reload the page\"), isLoaded && __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    className: \"text-3xl leading-9 font-extrabold tracking-tight text-gray-900 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \"Search Place\"), __jsx(\"form\", {\n    className: \"flex\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"w-full\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, __jsx(Autocomplete, {\n    onLoad: onLoad,\n    fields: ['place_id'],\n    onPlaceChanged: onPlaceChanged,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    ref: inputEl,\n    type: \"text\",\n    className: \"form-input block py-3 w-full rounded-md\",\n    placeholder: \"Type keywords...\",\n    onKeyPress: onKeypress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }))))), __jsx(\"div\", {\n    style: {\n      marginTop: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(\"iframe\", {\n    src: `https://maps.google.com/maps?q=${locationData.data.lat},${locationData.data.lng}&output=embed`,\n    width: '100%',\n    height: 450,\n    style: {\n      border: 0\n    },\n    allowfullscreen: \"\",\n    loading: \"lazy\",\n    referrerpolicy: \"no-referrer-when-downgrade\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/user/Documents/Accenture/next-js-places-map/components/searchForm.js"],"names":["React","useRef","useState","useRouter","useLoadScript","Autocomplete","axios","useSelector","useDispatch","getMapLocation","scriptOptions","googleMapsApiKey","libraries","SearchForm","action","router","isLoaded","loadError","autocomplete","setAutocomplete","inputEl","locationData","state","mapsData","dispatch","console","log","data","onKeypress","e","key","preventDefault","handleSubmit","onLoad","autocompleteObj","onPlaceChanged","place","getPlace","useEffect","marginTop","lat","lng","border"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SACEC,aADF,EAEEC,YAFF,QAGO,wBAHP;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,cAAR,QAA6B,wBAA7B;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,gBAAgB,EAAE,yCADE;AAEpBC,EAAAA,SAAS,EAAE,CAAC,QAAD;AAFS,CAAtB;AAOA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAgC;AAC7C,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0Bb,aAAa,CAACM,aAAD,CAA7C;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCjB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAMkB,OAAO,GAAGnB,MAAM,CAAC,IAAD,CAAtB;AAEA,MAAIoB,YAAY,GAAGd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACC,QAAlB,CAA9B;AACA,MAAIC,QAAQ,GAAIhB,WAAW,EAA3B;AAEAiB,EAAAA,OAAO,CAACC,GAAR,CAAYL,YAAY,CAACM,IAAzB;;AAEA,QAAMC,UAAU,GAAIC,CAAD,IAAO;AACxB,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBD,MAAAA,CAAC,CAACE,cAAF;AACA,aAAO,KAAP;AACD;AACF,GALD;;AAOA,QAAMC,YAAY,GAAIH,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACE,cAAF;AACD,GAFD;;AAIA,QAAME,MAAM,GAAIC,eAAD,IAAqB;AAClCf,IAAAA,eAAe,CAACe,eAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,cAAc,GAAIN,CAAD,IAAO;AAC5B,QAAIX,YAAJ,EAAkB;AAChB,YAAMkB,KAAK,GAAGlB,YAAY,CAACmB,QAAb,EAAd;;AACA,UAAI,cAAcD,KAAlB,EAAyB;AACvBZ,QAAAA,QAAQ,CAACf,cAAc,CAAC;AAAC2B,UAAAA,KAAK,EAACA;AAAP,SAAD,CAAf,CAAR;AACD;AACF;AACF,GAPD;;AASApC,EAAAA,KAAK,CAACsC,SAAN,CAAgB,MAAM,CACrB,CADD,EACE,CAACd,QAAD,EAAUH,YAAY,CAACM,IAAvB,CADF;AAGA,SACE;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIV,SAAS,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFJ,EAKID,QAAQ,IACR,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,qEAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAEgB,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEC,MADV;AAEE,IAAA,MAAM,EAAE,CAAC,UAAD,CAFV;AAGE,IAAA,cAAc,EAAEE,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AACE,IAAA,GAAG,EAAEf,OADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,SAAS,EAAC,yCAHZ;AAIE,IAAA,WAAW,EAAC,kBAJd;AAKE,IAAA,UAAU,EAAEQ,UALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CADF,CAFF,CANJ,EA4BE;AAAK,IAAA,KAAK,EAAE;AAACW,MAAAA,SAAS,EAAC;AAAX,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM;AAAQ,IAAA,GAAG,EAAG,kCAAiClB,YAAY,CAACM,IAAb,CAAkBa,GAAI,IAAGnB,YAAY,CAACM,IAAb,CAAkBc,GAAI,eAA9F;AAA8G,IAAA,KAAK,EAAE,MAArH;AAA6H,IAAA,MAAM,EAAE,GAArI;AAA0I,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR,KAAjJ;AAA6J,IAAA,eAAe,EAAC,EAA7K;AAAgL,IAAA,OAAO,EAAC,MAAxL;AAA+L,IAAA,cAAc,EAAC,4BAA9M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,CA5BF,CADF;AAkCD","sourcesContent":["import React, { useRef, useState } from 'react'\nimport { useRouter } from 'next/router'\nimport {\n  useLoadScript,\n  Autocomplete,\n} from '@react-google-maps/api';\nimport axios from 'axios';\nimport {useSelector,useDispatch} from 'react-redux'\nimport {getMapLocation} from \"../redux/maps/mapSlice\";\nconst scriptOptions = {\n  googleMapsApiKey: \"AIzaSyCn7YgQgOtNoSwAXJ_OQ-urMB5oNVq73cM\",\n  libraries: ['places'],\n}\n\n\n\nexport default function SearchForm({ action }) {\n  const router = useRouter();\n  const { isLoaded, loadError } = useLoadScript(scriptOptions)\n  const [autocomplete, setAutocomplete] = useState(null)\n  const inputEl = useRef(null)\n\n  let locationData = useSelector((state) => state.mapsData)\n  let dispatch =  useDispatch()\n\n  console.log(locationData.data)\n\n  const onKeypress = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      return false\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  }\n\n  const onLoad = (autocompleteObj) => {\n    setAutocomplete(autocompleteObj)\n  }\n\n  const onPlaceChanged = (e) => {\n    if (autocomplete) {\n      const place = autocomplete.getPlace()\n      if ('place_id' in place) {\n        dispatch(getMapLocation({place:place}))\n      }\n    }\n  }\n\n  React.useEffect(() => {\n  },[dispatch,locationData.data])\n\n  return (\n    <div className=\"bg-white shadow p-10 rounded\">\n      { loadError && (\n        <div>Google Map script can't be loaded, please reload the page</div>\n      ) }\n\n      { isLoaded && (\n        <React.Fragment>\n          <h1 className=\"text-3xl leading-9 font-extrabold tracking-tight text-gray-900 mb-4\">Search Place</h1>\n          <form className=\"flex\" onSubmit={handleSubmit}>\n            <div className=\"w-full\">\n              <Autocomplete\n                onLoad={onLoad}\n                fields={['place_id']}\n                onPlaceChanged={onPlaceChanged}\n              >\n                <input\n                  ref={inputEl}\n                  type=\"text\"\n                  className=\"form-input block py-3 w-full rounded-md\"\n                  placeholder=\"Type keywords...\"\n                  onKeyPress={onKeypress}\n                />\n              </Autocomplete>\n            </div>\n          </form>\n        </React.Fragment>\n      ) }\n\n      <div style={{marginTop:'1em'}}>\n            <iframe src={`https://maps.google.com/maps?q=${locationData.data.lat},${locationData.data.lng}&output=embed`} width={'100%'} height={450} style={{border:0}} allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}