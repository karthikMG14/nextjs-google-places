{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const getMapLocation = createAsyncThunk('map/getMapLocation', async (payload, {\n  getState\n}) => {\n  return axios.get(`http://localhost:3000/api/mapdata?placeId=${payload.place.place_id}`).then(res => {\n    try {\n      return {\n        data: res.data.result.result.geometry.location\n      };\n    } catch (e) {\n      return {\n        data: {}\n      };\n    }\n  }).catch(err => alert(\"Something went wrong try again later\"));\n});\nexport const mapsSlice = createSlice({\n  name: 'maps',\n  initialState: {\n    loading: true,\n    error: false,\n    data: {\n      lat: 17.4770936,\n      lng: 78.3920437\n    }\n  },\n  extraReducers: {\n    [getMapLocation.pending]: state => {\n      state.loading = true;\n      state.error = false;\n    },\n    [getMapLocation.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.error = false;\n      state.data = action.payload.data;\n    },\n    [getMapLocation.rejected]: state => {\n      state.loading = false;\n      state.error = true;\n    }\n  }\n});\nexport default mapsSlice.reducer;","map":{"version":3,"sources":["/Users/user/Documents/Accenture/next-js-places-map/redux/maps/mapSlice.js"],"names":["createAsyncThunk","createSlice","axios","getMapLocation","payload","getState","get","place","place_id","then","res","data","result","geometry","location","e","catch","err","alert","mapsSlice","name","initialState","loading","error","lat","lng","extraReducers","pending","state","fulfilled","action","rejected","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,MAAMC,cAAc,GAAGH,gBAAgB,CAAC,oBAAD,EAC7C,OAAOI,OAAP,EAAgB;AAACC,EAAAA;AAAD,CAAhB,KAA+B;AACxB,SAAOH,KAAK,CAACI,GAAN,CAAW,6CAA4CF,OAAO,CAACG,KAAR,CAAcC,QAAS,EAA9E,EACNC,IADM,CACDC,GAAG,IAAI;AACT,QAAG;AACC,aAAO;AAACC,QAAAA,IAAI,EAACD,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBA,MAAhB,CAAuBC,QAAvB,CAAgCC;AAAtC,OAAP;AACH,KAFD,CAEC,OAAMC,CAAN,EAAQ;AACL,aAAO;AAACJ,QAAAA,IAAI,EAAC;AAAN,OAAP;AACH;AACJ,GAPM,EAQNK,KARM,CAQAC,GAAG,IAAIC,KAAK,CAAC,sCAAD,CARZ,CAAP;AASN,CAX4C,CAAvC;AAcP,OAAO,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AACpCmB,EAAAA,IAAI,EAAE,MAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACPC,IAAAA,OAAO,EAAE,IADF;AAEPC,IAAAA,KAAK,EAAE,KAFA;AAGPZ,IAAAA,IAAI,EAAE;AAACa,MAAAA,GAAG,EAAC,UAAL;AAAgBC,MAAAA,GAAG,EAAC;AAApB;AAHC,GAFsB;AAOpCC,EAAAA,aAAa,EAAE;AACd,KAACvB,cAAc,CAACwB,OAAhB,GAA2BC,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,KAAd;AACT,KAJa;AAKd,KAACpB,cAAc,CAAC0B,SAAhB,GAA4B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACrCF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,KAAd;AACAK,MAAAA,KAAK,CAACjB,IAAN,GAAamB,MAAM,CAAC1B,OAAP,CAAeO,IAA5B;AACT,KATa;AAUd,KAACR,cAAc,CAAC4B,QAAhB,GAA4BH,KAAD,IAAW;AACrCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACSM,MAAAA,KAAK,CAACL,KAAN,GAAc,IAAd;AACT;AAba;AAPqB,CAAD,CAA7B;AAyBP,eAAeJ,SAAS,CAACa,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const getMapLocation = createAsyncThunk('map/getMapLocation', \r\n\tasync (payload, {getState}) => {\r\n        return axios.get(`http://localhost:3000/api/mapdata?placeId=${payload.place.place_id}`)\r\n        .then(res => {\r\n            try{\r\n                return {data:res.data.result.result.geometry.location}\r\n            }catch(e){ \r\n                return {data:{}}\r\n            }\r\n        })\r\n        .catch(err => alert(\"Something went wrong try again later\"))\r\n\t}\r\n)\r\n\r\nexport const mapsSlice = createSlice({\r\n\tname: 'maps',\r\n\tinitialState: {\r\n        loading: true,\r\n        error: false,\r\n        data: {lat:17.4770936,lng:78.3920437},\r\n    },\r\n\textraReducers: {\r\n\t\t[getMapLocation.pending]: (state) => {\r\n            state.loading = true\r\n            state.error = false\r\n\t\t},\r\n\t\t[getMapLocation.fulfilled]: (state, action) => {\r\n            state.loading = false\r\n            state.error = false\r\n            state.data = action.payload.data\r\n\t\t},\r\n\t\t[getMapLocation.rejected]: (state) => {\r\n\t\t\tstate.loading = false\r\n            state.error = true\r\n\t\t},\r\n\t}\r\n\t\r\n});\r\n\r\nexport default mapsSlice.reducer;"]},"metadata":{},"sourceType":"module"}